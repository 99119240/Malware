using System;
using System.IO;
using System.Threading;

class Program
{
    static void Main()
    {
        // Get the current user's directory
        string currentUserDirectory = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);

        // Set debug mode
        bool debug = false; // Change this value based on the requirement

        // Production stuff

        // Check if the directory exists
        if (Directory.Exists(currentUserDirectory))
        {
            if (debug)
            {
                Console.WriteLine($"Scanning directory in debug mode: {currentUserDirectory}");
                ScanDirectory(currentUserDirectory, debug);
            }
            else
            {
                Console.WriteLine($"Debug is disabled. Not displaying scanned information for directory: {currentUserDirectory}");
                ScanDirectory(currentUserDirectory, false);
            }
        }
        else
        {
            Console.WriteLine($"Directory does not exist: {currentUserDirectory}");
        }

        Console.WriteLine("Press any key to exit.");
        Console.WriteLine("Closing in 10 seconds.");
        Thread.Sleep(10000);
        Console.ReadKey();
    }

    static void ScanDirectory(string directory, bool printInfo)
    {
        try
        {
            // Iterate through subdirectories and files
            foreach (var subdirectory in Directory.EnumerateDirectories(directory))
            {
                if (printInfo)
                {
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine($"[Folder] {Path.GetFileName(subdirectory)} @ {subdirectory}");
                    Console.ResetColor();
                }

                // Recursive call to scan subdirectories
                ScanDirectory(subdirectory, printInfo);
            }

            foreach (var file in Directory.EnumerateFiles(directory))
            {
                try
                {
                    if (printInfo)
                    {
                        Console.ForegroundColor = ConsoleColor.DarkYellow;
                        Console.WriteLine($"[File] {Path.GetFileName(file)} @ {file}");
                        Console.ResetColor();
                    }
                }
                catch (UnauthorizedAccessException)
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine($"[Error] {Path.GetFileName(file)} failed to read");
                    Console.ResetColor();
                }
            }
        }
        catch (UnauthorizedAccessException)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine($"[Error] {Path.GetFileName(directory)} failed to read");
            Console.ResetColor();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error scanning directory: {ex.Message}");
        }
    }
}
